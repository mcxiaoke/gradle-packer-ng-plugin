buildscript {
    ext.packer_version = '1.0.9'

    repositories {
        maven { url "file://" + project.rootProject.rootDir + '/tmp/repo/' }
        jcenter()
//        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.0'
        classpath "com.mcxiaoke.gradle:packer-ng:$packer_version"
    }
}

repositories {
    maven { url "file://" + project.rootProject.rootDir + '/tmp/repo/' }
    jcenter()
//    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

apply plugin: 'com.android.application'
apply plugin: 'packer'

// https://code.google.com/p/android/issues/detail?id=171089


android {
    compileSdkVersion Integer.parseInt(project.COMPILE_SDK_VERSION)
    buildToolsVersion project.BUILD_TOOLS_VERSION

    compileOptions.encoding = "UTF-8"

    defaultConfig {
        versionName project.VERSION_NAME
        versionCode Integer.parseInt(project.VERSION_CODE)
        minSdkVersion Integer.parseInt(project.MIN_SDK_VERSION)
        targetSdkVersion Integer.parseInt(project.TARGET_SDK_VERSION)
    }

    signingConfigs {
        release {
            storeFile file("android.keystore")
            storePassword "android"
            keyAlias "android"
            keyPassword "android"
            v2SigningEnabled false
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
        }

        //someType {
        //    minifyEnabled false
        //    debuggable true
        //}
//        beta {
//            signingConfig signingConfigs.release
//            minifyEnabled false
//            debuggable true
//        }

        debug {
            // invalid: no signingConfig
            signingConfig signingConfigs.release
            minifyEnabled false

        }


    }


    productFlavors {
        cat {
            packer.market name, rootProject.rootDir.absolutePath + File.separator + "markets_cat.txt"
        }
        dog {
            signingConfig signingConfigs.release
            packer.market name, rootProject.rootDir.absolutePath + File.separator + "markets_dog.txt"
        }
        pig {

        }
    }

    lintOptions {
        abortOnError false
        htmlReport true
    }

    packagingOptions {
        exclude 'LICENSE.txt'
    }

}

packer {
    checkSigningConfig = true
    checkZipAlign = true
//    archiveNameFormat = '${appPkg}-${flavorName}-${buildType}-v${versionName}-${versionCode}'
    archiveOutput = file(new File(project.rootProject.buildDir.path, "apks"))
    market = rootProject.rootDir.absolutePath + File.separator + "markets.txt"
}


dependencies {
    // compile project(':helper')
    compile "com.mcxiaoke.gradle:packer-helper:$packer_version"
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:support-v4:25.2.0'
    compile 'com.android.support:appcompat-v7:25.2.0'
    compile 'com.jakewharton:butterknife:6.0.0'
    compile('com.mcxiaoke.next:core:1.2.0@aar') {
        exclude group: 'com.android.support', module: 'support-v4'
    }
    compile 'com.mcxiaoke.next:http:1.2.0@aar'
    compile('com.mcxiaoke.next:ui:1.2.0@aar') {
        exclude group: 'com.android.support', module: 'support-v4'
    }
}

//android.applicationVariants.all { variant ->
//    variant.outputs.each {
//        println("release: ${it.outputFile}")
//    }
//}

// gradle hook
//android.applicationVariants.all { variant ->
//    def copyAssets = project.task("copy${variant.name.capitalize()}Assets",
//            type: Copy) {
//        from "~/Downloads/demo"
//        into "src/main/assets/demo"
//        doLast {
//            println("copy assets to src/main/assets/demo for ${variant.name}")
//        }
//    }
//    def deleteAssets = project.task("delete${variant.name.capitalize()}Assets",
//            type: Delete) {
//        delete "src/main/assets/demo"
//        doLast {
//            println("delete assets in src/main/assets/demo for ${variant.name}")
//        }
//    }
//    variant.mergeAssets.dependsOn copyAssets
//    variant.assemble.dependsOn deleteAssets
//}

// gradle hook
//gradle.buildFinished { buildResult ->
//    println "BUILD FINISHED"
//    println "build failure - " + buildResult.failure
//}
